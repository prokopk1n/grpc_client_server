// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: session/create_server.proto

package session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirplaneServerClient is the client API for AirplaneServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirplaneServerClient interface {
	// Sends info about booking
	GetTicketInfo(ctx context.Context, in *TicketReq, opts ...grpc.CallOption) (*TicketInfoReply, error)
}

type airplaneServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAirplaneServerClient(cc grpc.ClientConnInterface) AirplaneServerClient {
	return &airplaneServerClient{cc}
}

func (c *airplaneServerClient) GetTicketInfo(ctx context.Context, in *TicketReq, opts ...grpc.CallOption) (*TicketInfoReply, error) {
	out := new(TicketInfoReply)
	err := c.cc.Invoke(ctx, "/session.AirplaneServer/GetTicketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirplaneServerServer is the server API for AirplaneServer service.
// All implementations must embed UnimplementedAirplaneServerServer
// for forward compatibility
type AirplaneServerServer interface {
	// Sends info about booking
	GetTicketInfo(context.Context, *TicketReq) (*TicketInfoReply, error)
	mustEmbedUnimplementedAirplaneServerServer()
}

// UnimplementedAirplaneServerServer must be embedded to have forward compatible implementations.
type UnimplementedAirplaneServerServer struct {
}

func (UnimplementedAirplaneServerServer) GetTicketInfo(context.Context, *TicketReq) (*TicketInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketInfo not implemented")
}
func (UnimplementedAirplaneServerServer) mustEmbedUnimplementedAirplaneServerServer() {}

// UnsafeAirplaneServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirplaneServerServer will
// result in compilation errors.
type UnsafeAirplaneServerServer interface {
	mustEmbedUnimplementedAirplaneServerServer()
}

func RegisterAirplaneServerServer(s grpc.ServiceRegistrar, srv AirplaneServerServer) {
	s.RegisterService(&AirplaneServer_ServiceDesc, srv)
}

func _AirplaneServer_GetTicketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirplaneServerServer).GetTicketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AirplaneServer/GetTicketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirplaneServerServer).GetTicketInfo(ctx, req.(*TicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AirplaneServer_ServiceDesc is the grpc.ServiceDesc for AirplaneServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirplaneServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.AirplaneServer",
	HandlerType: (*AirplaneServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicketInfo",
			Handler:    _AirplaneServer_GetTicketInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session/create_server.proto",
}
